--- vboxsf/dirops.c.orig	2015-06-18 07:36:44.000000000 +0200
+++ vboxsf/dirops.c	2015-06-18 07:40:55.000000000 +0200
@@ -126,13 +126,21 @@
 
     TRACE();
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     sf_g = GET_GLOB_INFO(dir->f_dentry->d_inode->i_sb);
+#else
+    sf_g = GET_GLOB_INFO(dir->f_path.dentry->d_inode->i_sb);
+#endif
     sf_d = dir->private_data;
 
     BUG_ON(!sf_g);
     BUG_ON(!sf_d);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     inode = dir->f_dentry->d_inode;
+#else
+    inode = dir->f_path.dentry->d_inode;
+#endif
     sf_i = GET_INODE_INFO(inode);
 
     BUG_ON(!sf_i);
--- vboxsf/regops.c.orig	2015-06-18 07:36:57.000000000 +0200
+++ vboxsf/regops.c	2015-06-18 07:52:23.000000000 +0200
@@ -108,7 +108,11 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_read = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     loff_t pos = *off;
@@ -183,7 +187,11 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_written = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_inode_info *sf_i = GET_INODE_INFO(inode);
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
@@ -465,7 +473,11 @@
     uint32_t nread = PAGE_SIZE;
     int err;
     struct file *file = vma->vm_file;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
 
@@ -605,7 +617,11 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 static int sf_readpage(struct file *file, struct page *page)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     uint32_t nread = PAGE_SIZE;
--- VirtualBox-4.2.26/src/VBox/Additions/linux/sharedfolders/dirops.c.orig	2015-06-18 07:36:44.000000000 +0200
+++ VirtualBox-4.2.26/src/VBox/Additions/linux/sharedfolders/dirops.c	2015-06-18 07:40:55.000000000 +0200
@@ -126,13 +126,21 @@
 
     TRACE();
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     sf_g = GET_GLOB_INFO(dir->f_dentry->d_inode->i_sb);
+#else
+    sf_g = GET_GLOB_INFO(dir->f_path.dentry->d_inode->i_sb);
+#endif
     sf_d = dir->private_data;
 
     BUG_ON(!sf_g);
     BUG_ON(!sf_d);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     inode = dir->f_dentry->d_inode;
+#else
+    inode = dir->f_path.dentry->d_inode;
+#endif
     sf_i = GET_INODE_INFO(inode);
 
     BUG_ON(!sf_i);
--- VirtualBox-4.2.26/src/VBox/Additions/linux/sharedfolders/regops.c.orig	2015-06-18 07:36:57.000000000 +0200
+++ VirtualBox-4.2.26/src/VBox/Additions/linux/sharedfolders/regops.c	2015-06-18 07:52:23.000000000 +0200
@@ -108,7 +108,11 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_read = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     loff_t pos = *off;
@@ -183,7 +187,11 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_written = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_inode_info *sf_i = GET_INODE_INFO(inode);
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
@@ -465,7 +473,11 @@
     uint32_t nread = PAGE_SIZE;
     int err;
     struct file *file = vma->vm_file;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
 
@@ -605,7 +617,11 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 static int sf_readpage(struct file *file, struct page *page)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
     struct inode *inode = file->f_dentry->d_inode;
+#else
+    struct inode *inode = file->f_path.dentry->d_inode;
+#endif
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     uint32_t nread = PAGE_SIZE;
